  public:
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    unordered_map<string,int>m;
    string func(Node* root)
    {
        //here every suplicate subtree should be of size 2 or more
        //hence null cant be put in map
        if(root==NULL)return "$";   
        string s="";
        if(root->left==NULL && root->right==NULL)
        {
            s=to_string(root->data);
            return s;
        }
        //here if leaf node just return its data
        //this above 2 condition make sure that of size 2 or more are retruned
        s=s+to_string(root->data);
        s=s+func(root->left);
        s=s+func(root->right);
        m[s]++;
        return s;//this return is also important and this subtree should be added with its parent
        //above will make sure 2 subtree  of size 2 or more are done+1 and 
        //if more than 2 in that key of substring it is duplicate
    }
    int dupSub(Node *root) {
        m.clear();
         func(root);
         for(auto x:m)
         {
             if(x.second>=2)return true;
         }
         return false;
    }