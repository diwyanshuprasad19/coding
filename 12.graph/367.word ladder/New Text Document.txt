    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> s;
        for(int i=0;i<wordList.size();i++)
        {
            s.insert(wordList[i]);
        }
        int n=beginWord.size();
        queue<string> q;
        q.push(beginWord);
        int len=0;
        if(s.find(endWord)==s.end())return 0;
        while(q.empty()==false)
        {
            int qsize=q.size();
            len++;
            for(int j=0;j<qsize;j++)
            {
                string sword=q.front();
            q.pop();
                for(int i=0;i<n;i++)
                {
                    char ch=sword[i];
                    for(char c='a';c<='z';c++)
                    {
                        sword[i]=c;
                        if(sword==endWord)return len+1;
                        if(s.find(sword)==s.end())continue;
                        s.erase(sword);
                        q.push(sword);
                    }
                    sword[i]=ch;
                }
            }
        }
        return 0;
    }