class Solution {
public

    void dfs(int i, int j, vectorvectorint &vis,vectorvectorint &grid, int n, int m){
        if(i0  j0  i=n  j=m) return ;
        if(grif[i][j]==0)return;
        if(!vis[i][j]){
            vis[i][j]=1;
            dfs(i+1,j,vis,grid,n,m);
            dfs(i-1,j,vis,grid,n,m);
            dfs(i,j+1,vis,grid,n,m);
            dfs(i,j-1,vis,grid,n,m);
            dfs(i+1,j+1,vis,grid,n,m);
            dfs(i+1,j-1,vis,grid,n,m);
            dfs(i-1,j-1,vis,grid,n,m);
            dfs(i-1,j+1,vis,grid,n,m);
        }
    }
    int numIslands(vectorvectorchar& grid) {
        int n = grid.size();
        int m=grid[0].size();
        vectorvectorint vis(n,vectorint (m,0));
        int ans=0;
        for(int i=0;in;i++){
            for(int j=0;jm;j++){
                if(vis[i][j] ==0 && grid[i][j] ==1){
                    dfs(i,j,vis,vis,n,m);
                    ans++;
                }
            }
        }
        return ans;
    }
};


TC:O(n^2)
SC:O(n)