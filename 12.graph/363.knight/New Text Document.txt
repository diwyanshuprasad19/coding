    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    int x1=KnightPos[0];
	    int y1=KnightPos[1];
	    int x2=TargetPos[0];
	    int y2=TargetPos[1];
	    int arr[1000][1000];
	    if(x1==x2 && y1==y2)
	    return 0;
	    for(int i=0;i<N;i++)
	    {
	        for(int j=0;j<N;j++)
	        {
	            arr[i][j]=0;
	        }
	    }
	    queue<pair<int,int>> q;
	    q.push(make_pair(x1-1,y1-1));
	    while(q.empty()==false)
	    {
	        auto curr=q.front();
	        int i=curr.first;
	        int j=curr.second;
	        q.pop();
	        if(i+1>=0 && i+1<N && j+2<N && j+2>=0 && arr[i+1][j+2]==0)
	        {
	            arr[i+1][j+2]=arr[i][j]+1;
	            q.push(make_pair(i+1,j+2));
	        }
	         if(i+1>=0 && i+1<N && j-2<N && j-2>=0 && arr[i+1][j-2]==0)
	        {
	            arr[i+1][j-2]=arr[i][j]+1;
	            q.push(make_pair(i+1,j-2));
	        }
	        if(i-1>=0 && i-1<N && j+2<N && j+2>=0 && arr[i-1][j+2]==0)
	        {
	            arr[i-1][j+2]=arr[i][j]+1;
	            q.push(make_pair(i-1,j+2));
	        }
	         else if(i-1>=0 && i-1<N && j-2<N && j-2>=0 && arr[i-1][j-2]==0)
	        {
	            arr[i-1][j-2]=arr[i][j]+1;
	            q.push(make_pair(i-1,j-2));
	        }
	     if(j+1>=0 && j+1<N && i+2>=0 && i+2<N && arr[i+2][j+1]==0)
	      {
	          arr[i+2][j+1]=arr[i][j]+1;
	          q.push(make_pair(i+2,j+1));
	      }
	       if(j+1>=0 && j+1<N && i-2>=0 && i-2<N && arr[i-2][j+1]==0)
	      {
	          arr[i-2][j+1]=arr[i][j]+1;
	          q.push(make_pair(i-2,j+1));
	      }  
	        if(j-1>=0 && j-1<N && i-2>=0 && i-2<N && arr[i-2][j-1]==0)
	      {
	          arr[i-2][j-1]=arr[i][j]+1;
	          q.push(make_pair(i-2,j-1));
	      } 
	      if(j-1>=0 && j-1<N && i+2>=0 && i+2<N && arr[i+2][j-1]==0)
	      {
	          arr[i+2][j-1]=arr[i][j]+1;
	          q.push(make_pair(i+2,j-1));
	      }
	    }
	    return arr[x2-1][y2-1];
	}