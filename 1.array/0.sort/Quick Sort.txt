#include <iostream>
#include <vector>
using namespace std;

// Partition function to partition the array around the pivot
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Selecting the last element as the pivot
    int i = low - 1; // Index of the smaller element

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Quick sort function
void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); // Partitioning index

        // Recursively sort elements before and after the partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    vector<int> arr = {64, 34, 25, 12, 22, 11, 90};
    int n = arr.size();
    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    quickSort(arr, 0, n - 1);

    cout << "Sorted array using Quick Sort with last element as pivot: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}


Time Complexity:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n^2)
The time complexity of Quick Sort depends on the choice of pivot and how balanced the partitioning is. When the pivot divides the array into roughly equal halves, as is often the case in practice, the algorithm performs well, resulting in an average and best-case time complexity of O(n log n). However, in the worst-case scenario, such as when the pivot is consistently the smallest or largest element, the algorithm may exhibit quadratic behavior, resulting in a time complexity of O(n^2).
Space Complexity:
Average Case: O(log n)
Worst Case: O(n)
Quick Sort is not a stable sort and is an in-place sorting algorithm, meaning it does not require additional space proportional to the size of the input array for sorting. However, it does require additional space for function call stack frames during recursive calls. In the average case, the space complexity of Quick Sort is O(log n), corresponding to the maximum depth of the recursion stack. In the worst case, the space complexity can degrade to O(n) if the recursion tree is highly unbalanced, potentially leading to stack overflow errors for very large arrays.