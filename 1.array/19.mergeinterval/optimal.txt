class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        int n=intervals.size();
        vector<vector<int>>ans;
        int currs,curre;
        for(int i=0;i<n-1;i++)
        {
        if(intervals[i][1]>=intervals[i+1][0])
        {
            intervals[i+1][0]=intervals[i][0];
            intervals[i+1][1]=max(intervals[i][1],intervals[i+1][1]); //can be 1,9 and 6,8 or 1,3 and 2,4
            intervals[i][0]=-1;
        }
        }
         for(int i=0;i<n;i++)
         {
             vector<int>in(2);
             if(intervals[i][0]!=-1)
             {
                 in[0]=intervals[i][0];
                 in[1]=intervals[i][1];
                 ans.push_back(in);
             }
         }
        
        return ans;
        
    }
};

Time Complexity: O(n log n)
Space Complexity: O(n)