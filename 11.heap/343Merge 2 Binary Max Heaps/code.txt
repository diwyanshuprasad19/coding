    void heapify(vector<int> &arr,int i,int len)
    {
        int parent=i;
        if(parent>=len)
        return;
        int left=2*parent+1;
         int right=2*parent+2;
         if(left<len && arr[parent]<arr[left])
         parent =left;
          if(right<len && arr[parent]<arr[right])
         parent =right;
         if(right<len && left<len && arr[parent]<arr[left] && arr[parent]<arr[right])
         {
             if(arr[right]<arr[left])
             parent=left;
             else
             parent=right;
         }
         if(parent!=i)
         {
             swap(arr[parent],arr[i]);
             heapify(arr,parent,len);
         }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> arr;
        for(int i=0;i<n;i++)
        arr.push_back(a[i]);
        for(int i=0;i<m;i++)
        arr.push_back(b[i]);
        int tot=n+m;
        int nlef=tot/2-1;
        for(int i=nlef;i>=0;i--)
        {
            heapify(arr,i,tot);
        }
        return arr;
    }