class data{
    public:
    int value,row,col;
    data(int v,int r,int c)
    {
        value=v;
        row=r;
        col=c;
    }
};
struct mycomp{
    bool operator()(data &d1,data &d2)
    {
        return d1.value>d2.value;
    }
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
      vector<int>ans;
      priority_queue<data,vector<data>,mycomp> pq;
      for(int i=0;i<K;i++)
      {
          data d(arr[i][0],i,0);
          pq.push(d);
      }
      while(pq.empty()==false)
      {
          data d=pq.top();
          pq.pop();
          int v=d.value,r=d.row,c=d.col;
          ans.push_back(v);
          //row wise taken
          if(c+1<arr[r].size())
          {
              data q(arr[r][c+1],r,c+1);
              pq.push(q);
          }
      }
      return ans;
      
    }