#include<bits/stdc++.h>
int solve(int index,int previndex,int arr[],int n,vector<vector<int>> &dp)
{
    if(index==n)return 0;
    if(dp[index][previndex+1]!=-1)return dp[index][previndex];
    int nottake=0+solve(index+1,previndex,arr,n,dp);
    int take=0;
    if(previndex==-1 || arr[index]>arr[previndex])
        take=1+solve(index+1,index,arr,n,dp);
    return dp[index][previndex+1]=max(take,nottake);
}
int longestIncreasingSubsequence(int arr[], int n)
{
    vector<vector<int>> dp(n,vector<int>(n+1,-1));
   int count=solve(0,-1,arr,n,dp);
    return count;
}


TC:O(n^2)
SC:O(n^2)