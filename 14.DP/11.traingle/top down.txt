#include<bits/stdc++.h>
int solve(int i,int j,vector<vector<int>>& triangle, int n,vector<vector<int>>& dp)
{
    if(i==n-1)return dp[i][j]=triangle[i][j];
    if(dp[i][j]!=-1)return dp[i][j];
    int down=triangle[i][j]+solve(i+1,j,triangle,n,dp);
    int diagnol=triangle[i][j]+solve(i+1,j+1,triangle,n,dp);
    return dp[i][j]=min(down,diagnol);
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<vector<int>> dp;
    for(int i=0;i<n;i++)
    {
        vector<int> p;
        for(int j=0;j<i+1;j++)
        {
            p.push_back(-1);
        }
        dp.push_back(p);
    }
	int count =solve(0,0,triangle,n,dp);
    return count;
}