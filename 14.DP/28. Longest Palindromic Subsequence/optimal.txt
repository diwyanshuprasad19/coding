class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();
        string s1 =s;
        reverse(s.begin(),s.end());
        
        // Create a dp table with (n+1) rows and (m+1) columns, initialized to 0
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        
        // Fill the dp table using bottom-up dynamic programming approach
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                // If the characters match, increment the count by 1 from the previous diagonal
                if (s[i - 1] == s1[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                // Otherwise, take the maximum of the previous subsequences
                else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // The result is stored in dp[n][m], which represents the LCS length of the entire strings
        return dp[n][n];
    }
};

same tc and sc as lcs
