#include<bits/stdc++.h>
int solve(int index1,int index2,string s1,string s2,vector<vector<int>> &dp)
{
    if(index1<0 || index2<0)
        return 0;
    if(dp[index1][index2]!=-1)return dp[index1][index2];
    if(s1[index1]==s2[index2])
        return dp[index1][index2]=1+solve(index1-1,index2-1,s1,s2,dp);
    return dp[index1][index2]=max(solve(index1-1,index2,s1,s2,dp),solve(index1,index2-1,s1,s2,dp));
}

int lcs(string s, string t)
{
    vector<vector<int>> dp(s.length(),vector<int>(t.length(),-1));
	int count=solve(s.length()-1,t.length()-1,s,t,dp);
    return count;
}

TC:O(n1*n2)- only calculated once
SC:O(n1*n2) - due to dp array
