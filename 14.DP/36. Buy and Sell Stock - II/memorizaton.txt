#include<bits/stdc++.h>
long solve(int index,int buy,long *values,int n,vector<vector<long>> &dp)
{
    if(index==n)
        return 0;
    if(dp[index][buy]!=-1)return dp[index][buy];
    int profit1,profit2;
    if(buy==1)
    {
        profit1= -values[index]+solve(index+1,0,values,n,dp);
        profit2=0+solve(index+1,1,values,n,dp);
    }
    else
    {
        profit1=values[index]+solve(index+1,1,values,n,dp);
        profit2=0+solve(index+1,0,values,n,dp);
    }
    return dp[index][buy]=max(profit1,profit2);
}

long getMaximumProfit(long *values, int n)
{
    vector<vector<long>> dp(n,vector<long>(2,-1));
    long count=solve(0,1,values,n,dp);
    return count;
}