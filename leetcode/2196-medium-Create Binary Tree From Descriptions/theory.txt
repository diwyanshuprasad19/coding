https://docs.google.com/document/d/1DyYqWMBMQiK66qcA8F5eBWq_cpJ3X_jH22IQ8QN9mVc/edit
theory


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        int n = descriptions.size();
        unordered_map<int, TreeNode*> h; // Maps node values to TreeNode pointers
        unordered_map<int, int> p; // Tracks parent nodes
        unordered_map<int, int> c; // Tracks child nodes

        // Process each description
        for (int i = 0; i < n; i++) {
            int parent = descriptions[i][0];
            int child = descriptions[i][1];
            int isLeft = descriptions[i][2]; // Whether the child is a left child

            // Create the parent node if it doesn't exist
            if (h.find(parent) == h.end()) {
                TreeNode* node = new TreeNode(parent);
                h[parent] = node;
            }

            // Create the child node if it doesn't exist
            if (h.find(child) == h.end()) {
                TreeNode* node = new TreeNode(child);
                h[child] = node; 
            }

            // Link the parent and child nodes
            if (isLeft) {
                h[parent]->left = h[child];
            } else {
                h[parent]->right = h[child];
            }
            c[child]++;
            p[parent]++;
        }

        // Find the root node
        TreeNode* root = nullptr;
        for (const auto& entry : h) {
            if (p.find(entry.first) != p.end() && c.find(entry.first) == c.end()) {
                root = entry.second;
                break;
            }
        }

        return root;
    }
};

TC:O(n)
SC:O(n)