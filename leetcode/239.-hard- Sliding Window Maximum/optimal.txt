class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        deque<int>dq;
        // first window process krenge
        for(int i=0;i<k;i++){
            int element  = nums[i];
            // jitne bhi queue ke andar chotte element hai unko remove krdo

            while(!dq.empty() && element>nums[dq.back()]){
                dq.pop_back();
            }
            // now ab insert kar do
            dq.push_back(i);
        }
        // remaining window ko process kro
        // removal
        // addition
        for(int i=k;i<nums.size();i++){
            // ans sotre kro
            ans.push_back(nums[dq.front()]);
            // removal
            // out of range removal for window outside elements
            if(!dq.empty() && i-dq.front()>=k){
                dq.pop_front();
            }

            // chotte element pop krdo
            int element  = nums[i];
            while(!dq.empty() && element >nums[dq.back()]){
                dq.pop_back();
            }
            // addition
            dq.push_back(i);
            
        }
        ans.push_back(nums[dq.front()]);
        return ans;
    }
};
Time Complexity: O(n)
Space Complexity: O(k)
