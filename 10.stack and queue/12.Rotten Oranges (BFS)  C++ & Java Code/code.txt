    int orangesRotting(vector<vector<int>>& grid) {
       if(grid.empty())return 0;
        int row=grid.size(),col=grid[0].size(),day=0,cnt=0,tot=0;
        queue<pair<int,int>> q;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]!=0)tot++;
                if(grid[i][j]==2)q.push({i,j});
            }
        }
        int d1[4]={0,-1,0,1};
        int d2[4]={1,0,-1,0};
        
        while(q.empty()==false)
        {
            int k=q.size();
            cnt+=k;
            while(k--)
            {
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                for(int i=0;i<4;i++)
                {
                    int x1=x+d1[i];
                    int y1=y+d2[i];
                    if(x1<0 || x1>=row ||y1<0 ||y1>=col || grid[x1][y1]!=1)continue;
                    if(grid[x1][y1]==1)
                    {
                        grid[x1][y1]=2;
                        q.push({x1,y1});
                    }
                }
            }
            if(!q.empty())day++;
        }
        return tot==cnt?day:-1;
    }
Time Complexity: O(n * m), where n is the number of rows and m is the number of columns in the grid.
Space Complexity: O(n * m), primarily due to the space used by the queue for BFS.
