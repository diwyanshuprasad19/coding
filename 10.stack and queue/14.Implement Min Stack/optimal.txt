class MinStack {
    stack<long long> s;
    long long mini;
public:
    MinStack() {
        while(s.empty()==false)s.pop();
        mini = LLONG_MAX;
    }
    
    void push(int val) {
        long long val1=val;
        if(s.empty())
        {
            s.push(val1);
            mini=val1;
        }
        else
        {
            if(val1<mini)
            {
		//2LL*val1*1LL-mini : also this as 1LL converter 1 as long long type from int to long:Just 2 or 1 will create confusion as int type they are
                s.push(2*val1*1LL-mini); //see here 2*val-mini = 2*mini-val hence both mini=val here this is intuition
                mini=val1;
            }
            else
                s.push(val1);
        }
    }
    
    void pop() {
        if(s.empty())return;
        long long e=s.top();
        s.pop();
        if(e<mini)
        {
            mini=2*mini-e;
        }
        
    }
    
    int top() {
        if(s.empty())return -1;
        long long e=s.top();
        if(e<mini)return mini;
        else
        {
            return e;
        }
    }
    
    int getMin() {
        return mini;
    }

Time Complexity: O(1) for all operations (push, pop, top, getMin).
Space Complexity: O(n) where n is the number of elements in the stack (due to the storage of elements in the stack).
