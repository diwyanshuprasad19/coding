 
Questions:https://leetcode.com/problems/longest-valid-parentheses/

   int findMaxLen(string s) 
    {
    int left =0,right=0,ans=0,n=s.size();
    for(int i=0;i<n;i++)
    {
        if(s[i]=='(')
        left++;
        else
        right++;
        if(left==right)
        ans=max(ans,left+right);
        else if(right>left)
        {
            left=0;
            right=0;
        }
    }
    left =0;
    right=0;
    for(int i=n-1;i>=0;i--)
    {
        if(s[i]=='(')
        left++;
        else
        right++;
        if(left==right)
        ans=max(ans,left+right);
        else if(left>right)
        {
            left=0;
            right=0;
        }
    }
    return ans;
    }


Time Complexity
Left-to-Right Pass:
The algorithm iterates over the entire string once.
Time complexity = 
𝑂
(
𝑛
)
O(n).
Right-to-Left Pass:
Again, the algorithm iterates over the entire string once.
Time complexity = 
𝑂
(
𝑛
)
O(n).
Total Time Complexity:
The total time complexity is 
𝑂
(
𝑛
)
+
𝑂
(
𝑛
)
=
𝑂
(
𝑛
)
O(n)+O(n)=O(n).
Space Complexity
The algorithm only uses a constant amount of extra space (left, right, ans).
Space complexity = 
𝑂
(
1
)
O(1).
