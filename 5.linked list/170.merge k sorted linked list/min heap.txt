//Simple Solution using min Heap

    Node * mergeKLists(Node *arr[], int n)
   {
       priority_queue<pair<int,Node*>,vector<pair<int,Node*> >,greater<pair<int,Node*> > > minHeap;
       for(int i=0;i<n;i++)
       {
           minHeap.push(make_pair(arr[i]->data,arr[i]));
       }
       Node* head=NULL;
       Node* tail=NULL;
       while(!minHeap.empty())
       {
           Node* newNode=minHeap.top().second;
           minHeap.pop();
           if(head == NULL)
           {
               head=newNode;
               tail=newNode;
           }
           else
           {
               tail->next=newNode;
               tail=newNode;
           }
           if(tail->next != NULL)
           {
               minHeap.push(make_pair(tail->next->data,tail->next));
           }
       }
       
       return head;
   }

//https://www.geeksforgeeks.org/priority-queue-of-pairs-in-c-ordered-by-first/
how top works.